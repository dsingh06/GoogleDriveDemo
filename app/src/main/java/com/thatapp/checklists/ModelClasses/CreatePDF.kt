package com.thatapp.checklists.ModelClasses

import android.content.Context
import android.os.Environment
import android.util.Log
import java.io.FileOutputStream

import com.itextpdf.text.pdf.PdfPTable
import com.itextpdf.text.pdf.PdfWriter
import java.io.File
import java.lang.Exception
import java.text.SimpleDateFormat
import java.util.*
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import java.io.ByteArrayOutputStream
import java.io.IOException
import android.provider.MediaStore.Images.Media.getBitmap
import android.graphics.drawable.BitmapDrawable
import android.R
import android.graphics.Color
import android.graphics.drawable.Drawable
import android.support.v4.content.ContextCompat
import android.support.v4.content.res.ResourcesCompat
import com.google.common.reflect.Reflection.getPackageName
import com.itextpdf.text.*
import com.itextpdf.text.pdf.PdfPCell
import com.itextpdf.text.Paragraph
import com.itextpdf.text.Chapter
import com.itextpdf.text.Chunk
import com.itextpdf.text.FontFactory
import com.itextpdf.text.Font.BOLDITALIC
import com.itextpdf.text.Rectangle.*


class CreatePDF(val questions: ArrayList<QuestionItem>, val context: Context, val filename: String) {

    var prefManager = PrefManager(context)
    val storageDir = context.getFilesDir()
    var fm = filename.replace("[", "").replace("]", "").split(".xls")
    val timeStamp = SimpleDateFormat("dd-MM-yyyy_HH:mm").format(Date())
    var fileNm = fm[0] + ":" + timeStamp + ".pdf"
    val filep = File(storageDir.getAbsolutePath() + File.separator + "generated" + File.separator + prefManager.dirName)

    var des = filep.absolutePath + "/" + fileNm


    val document = Document()

    fun startPDFCreation() {

        var t = filep.mkdirs()
//        Log.e("sss", " " + t)

        try {
            PdfWriter.getInstance(document, FileOutputStream(des))
        } catch (ex: Exception) {
            Log.e("eee", ex.toString())
            return
        }
        document.pageSize = PageSize.A4
        document.isMarginMirroring = true
        document.setMargins(5f, 5f, 5f, 5f)

        document.open()

        Log.e("name ", "is  " + prefManager.userName)

        val paragraph1 = Paragraph("CheckList App")
        val paragraph2 = Paragraph("Job Title       " + prefManager.jobTitle.toString())
        val paragraph3 = Paragraph("Company         " + prefManager.companyName.toString())
        val paragraph4 = Paragraph("Date Time :     " + timeStamp.toString())
        val paragraph5 = Paragraph("Generated By :  " + prefManager.userName.toString())

        document.add(paragraph1)
        document.add(paragraph2)
        document.add(paragraph3)
        document.add(paragraph4)
        document.add(paragraph5)

        var table = PdfPTable(5)

        var cellM = PdfPCell(Phrase("Table this (Continued)"))
        cellM.setColspan(5);
        table.addCell(cellM);
        cellM = PdfPCell(Phrase("Continue on next page"))
        cellM.setColspan(5);
        table.addCell(cellM);
        table.setHeaderRows(2);
        table.setFooterRows(1);
        table.setSkipFirstHeader(true);
        table.setSkipLastFooter(true);


        table = PdfPTable(3)
        table.horizontalAlignment = Element.ALIGN_RIGHT

        table.widthPercentage = 23f
        table.setWidths(floatArrayOf(1f, 1f, 1f))

        var cellTwo = PdfPCell(Phrase("Yes"))
        cellTwo.colspan = 1
        table.addCell(cellTwo)

        cellTwo = PdfPCell(Phrase("No"))
        cellTwo.colspan = 1
        table.addCell(cellTwo)

        cellTwo = PdfPCell(Phrase("NA"))
        cellTwo.colspan = 1
        table.addCell(cellTwo)
        document.add(table)

        table = PdfPTable(5)

        table.horizontalAlignment = Element.ALIGN_LEFT

        table.widthPercentage = 100f
        table.setWidths(floatArrayOf(0.4f, 2.6f, 0.3f, 0.3f, 0.3f))
        // table.isLockedWidth = true
        for (aw in questions) {
            val ques: QuestionItem = aw
            if (ques.strHeading.length > 3) {

                var cell = PdfPCell(Phrase(ques.serialNo))
                cell.backgroundColor = BaseColor(45, 35, 94, 1)
                table.addCell(cell)

                cell = PdfPCell(Phrase(ques.strHeading))

                cell.colspan = 4
                table.addCell(cell)

            } else {
                var cell = PdfPCell(Phrase(ques.serialNo))
                cell.colspan = 1
                table.addCell(cell)


                cell = PdfPCell(Phrase(ques.strQuestion))
                cell.colspan = 1
                table.addCell(cell)

// Assigning drawable resource
                var d: Drawable? = null
                try {
                    //  if (ques.answer.equals("YES", true)) {
                    d = ContextCompat.getDrawable(context, com.thatapp.checklists.R.drawable.ic_yes)
                    /* } else if (ques.answer.equals("NO", true)) {
                         d = ContextCompat.getDrawable(context, com.thatapp.checklists.R.drawable.multiply)
                     } else if (ques.answer.equals("--", true)) {
                         d = ContextCompat.getDrawable(context, com.thatapp.checklists.R.drawable.blank)
                     }
 */
                    val bitDw = d as BitmapDrawable
                    val bmp = bitDw.bitmap
                    val stream = ByteArrayOutputStream()
                    bmp.compress(Bitmap.CompressFormat.PNG, 100, stream)
                    val image = Image.getInstance(stream.toByteArray())

                    cell = PdfPCell(image)
                    cell.colspan = 1
                    cell.rowspan = 1
                    cell.setPadding(5f)
                    cell.fixedHeight = 25f
                    cell.calculatedHeight = 0.1f


                    cell.setUseAscender(true)
                    cell.setUseDescender(true)

                    cell.horizontalAlignment = Element.ALIGN_CENTER
                    //  cell.verticalAlignment = Element.ALIGN_CENTER

                    if (ques.answer.equals("YES", true)) {
                        table.addCell(cell)
                        table.addCell("")
                        table.addCell("")
                    } else if (ques.answer.equals("NO", true)) {

                        table.addCell("")
                        table.addCell(cell)
                        table.addCell("")

                    } else if (ques.answer.equals("--", true)) {

                        table.addCell("")
                        table.addCell("")
                        table.addCell(cell)
                    }


                } catch (ex: Exception) {
                    Log.e("exxx", "111   " + ex.toString())
                    return
                }

            }

        }

        var cell = PdfPCell(Phrase("Additional Notes \n" + "1. Get Keys \n" + "2. Lock gates \n" + "3. Do something "))
        cell.colspan = 5
        cell.setPadding(5f)

        table.addCell(cell)


        var table1 = PdfPTable(4)
        table1.setWidths(floatArrayOf(2f, 2f, 2f, 3f))

        var cell1 = PdfPCell(Phrase("Operator Name \n"))
        cell1.colspan = 1
        cell1.rowspan = 2
        cell1.setPadding(5f)
        cell1.horizontalAlignment = Element.ALIGN_CENTER

        table1.addCell(cell1)

        cell1 = PdfPCell(Phrase("Vicky Singh"))
        cell1.colspan = 1
        cell1.rowspan = 2
        cell1.setPadding(5f)
        cell1.horizontalAlignment = Element.ALIGN_CENTER
        table1.addCell(cell1)

        cell1 = PdfPCell(Phrase("Signature"))
        cell1.colspan = 1
        cell1.rowspan = 2
        cell1.horizontalAlignment = Element.ALIGN_CENTER
        cell1.setPadding(5f)
        table1.addCell(cell1)
        cell1 = PdfPCell(Phrase("#"))
        cell1.colspan = 1
        cell1.rowspan = 2
        cell1.horizontalAlignment = Element.ALIGN_CENTER
        cell1.setPadding(5f)

        table1.addCell(cell1)

        cell = PdfPCell(table1)
        cell.colspan = 5
        cell.rowspan = 2
        cell.setPadding(5f)
        cell.horizontalAlignment = Element.ALIGN_CENTER
        table.addCell(cell)


        var table2 = PdfPTable(4)
        table2.setWidths(floatArrayOf(2f, 2f, 2f, 3f))
        cell = PdfPCell(Phrase("Work Order Number"))
        cell.colspan = 1
        cell.rowspan = 2
        cell.setPadding(5f)
        cell.horizontalAlignment = Element.ALIGN_CENTER
        table2.addCell(cell)

        cell = PdfPCell(Phrase("7878")) //this to take from user_input
        cell.colspan = 1
        cell.rowspan = 2
        cell.horizontalAlignment = Element.ALIGN_CENTER
        table2.addCell(cell)

        cell = PdfPCell(Phrase("Date"))
        cell.colspan = 1
        cell.rowspan = 2
        table2.addCell(cell)

        cell = PdfPCell(Phrase(timeStamp))
        cell.colspan = 1
        cell.rowspan = 2
        cell.horizontalAlignment = Element.ALIGN_CENTER
        table2.addCell(cell)

//        table.addCell(PdfPCell(table2))

        cell = PdfPCell(table2)
        cell.colspan = 5
        cell.rowspan = 2
        cell.setPadding(5f)
        cell.horizontalAlignment = Element.ALIGN_CENTER
        table.addCell(cell)
        try {
            document.add(table)

            document.close()
            val fileRepository = FileRepository(context)
            val fileName = fileNm
            val dirName = prefManager.dirName
            val createdBy = prefManager.userName
            val createdAt = timeStamp
            val modifiedAt = timeStamp
            val syncStatus = false
            val driveFolderId = prefManager.folderID
            val rootFolderId = prefManager.rootFolderID
            val fileId = "abc"

            //for ROOM
            if (rootFolderId != null) {
           //     fileRepository.insertTask(fileName, dirName!!, createdBy!!, createdAt, modifiedAt, driveFolderId!!, rootFolderId, fileId, syncStatus)
             //   Log.e("entered ", "in db")
            }

            Log.e("answer ", "closed")
        } catch (e: Exception) {
            Log.e("exception ", e.toString())
            return

        }
    }

}